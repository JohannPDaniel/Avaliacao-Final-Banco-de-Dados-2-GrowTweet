{
	"openapi": "3.0.3",
	"info": {
		"title": "Growtweet",
		"description": "Bem-vindo ao Growtweet, a plataforma inovadora para compartilhar suas ideias e conectar-se com o mundo.",
		"contact": {
			"name": "Linkedin",
			"url": "https://www.linkedin.com/in/johann-patr%C3%ADcio-daniel-112425196/"
		},
		"version": "1.0.1"
	},
	"servers": [
		{
			"url": "http://localhost:1807"
		}
	],
	"tags": [
		{
			"name": "Login",
			"description": "Autentique-se de forma segura e acesse sua conta com facilidade."
		},
		{
			"name": "Logout",
			"description": "Encerre sua sessão de maneira rápida e prática."
		},
		{
			"name": "Users",
			"description": "Gerencie suas informações e interaja com a comunidade de forma única."
		},
		{
			"name": "Tweets",
			"description": "Compartilhe seus pensamentos e atualizações em tempo real."
		},
		{
			"name": "Likes",
			"description": "Expresse seu apreço e curta os conteúdos que te inspiram."
		},
		{
			"name": "Replies",
			"description": "Converse e conecte-se através de respostas envolventes."
		},
		{
			"name": "Followers",
			"description": "Acompanhe e seja acompanhado por pessoas que compartilham dos mesmos interesses."
		}
	],
	"paths": {
		"/login": {
			"post": {
				"tags": ["Login"],
				"summary": "Autenticação do usuário",
				"description": "Este endpoint permite que um usuário faça login no sistema utilizando seu e-mail e senha.",
				"requestBody": {
					"required": true,
					"description": "Credenciais do usuário para login",
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/InfoLogin"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Login efetuado com sucesso",
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{ "$ref": "#/components/schemas/APIResponseLogin" },
										{
											"type": "object",
											"properties": {
												"data": {
													"$ref": "#/components/schemas/DataLogin"
												}
											}
										}
									]
								}
							}
						}
					},
					"400": {
						"description": "Erro de validação de entrada",
						"content": {
							"application/json": {
								"examples": {
									"Email Obrigatório": {
										"summary": "O campo e-mail não foi fornecido.",
										"value": {
											"success": false,
											"message": "O atributo e-mail é obrigatório!"
										}
									},
									"Senha Obrigatória": {
										"summary": "O campo senha não foi fornecido.",
										"value": {
											"success": false,
											"message": "O atributo senha é obrigatório!"
										}
									},
									"Email Formato Inválido": {
										"summary": "O campo e-mail deve ser uma string válida.",
										"value": {
											"success": false,
											"message": "O atributo email deve vir em formato de texto!"
										}
									},
									"Senha Formato Inválido": {
										"summary": "O campo senha deve ser uma string válida.",
										"value": {
											"success": false,
											"message": "O atributo senha deve vir em formato de texto!"
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "Erro de autenticação",
						"content": {
							"application/json": {
								"examples": {
									"Token Não Fornecido": {
										"summary": "Nenhum token foi enviado no cabeçalho",
										"value": {
											"success": false,
											"message": "Token não fornecido!"
										}
									},
									"Formato Inválido": {
										"summary": "Token enviado no formato incorreto",
										"value": {
											"success": false,
											"message": "Formato do token inválido! Use (Bearer <token>)."
										}
									},
									"Token Inválido": {
										"summary": "O token está ausente ou inválido",
										"value": {
											"success": false,
											"message": "Token inválido!"
										}
									},
									"Token Revogado": {
										"summary": "O token foi revogado e não pode ser usado",
										"value": {
											"success": false,
											"message": "Token inválido! Faça login novamente."
										}
									},
									"Usuário Não Autenticado": {
										"summary": "O token não corresponde a um usuário válido",
										"value": {
											"success": false,
											"message": "Usuário não autenticado!"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "Erro interno no servidor",
						"content": {
							"application/json": {
								"examples": {
									"Erro no Servidor": {
										"summary": "Ocorreu um erro inesperado no servidor",
										"value": {
											"success": false,
											"message": "Erro no servidor: descrição do erro."
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"/logout": {
			"post": {
				"tags": ["Logout"],
				"summary": "Encerrar sessão do usuário",
				"description": "Este endpoint permite que o usuário faça logout do sistema, invalidando o token de autenticação.",
				"responses": {
					"200": {
						"description": "Logout efetuado com sucesso",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/APIResponseLogout"
								}
							}
						}
					},
					"401": {
						"description": "Erro de autenticação",
						"content": {
							"application/json": {
								"examples": {
									"Token Não Fornecido": {
										"summary": "Nenhum token foi enviado no cabeçalho",
										"value": {
											"success": false,
											"message": "Token não fornecido!"
										}
									},
									"Formato Inválido": {
										"summary": "Token enviado no formato incorreto",
										"value": {
											"success": false,
											"message": "Formato do token inválido! Use (Bearer <token>)."
										}
									},
									"Token Inválido": {
										"summary": "O token está ausente ou inválido",
										"value": {
											"success": false,
											"message": "Token inválido!"
										}
									},
									"Token Revogado": {
										"summary": "O token foi revogado e não pode ser usado",
										"value": {
											"success": false,
											"message": "Token inválido! Faça login novamente."
										}
									},
									"Usuário Não Autenticado": {
										"summary": "O token não corresponde a um usuário válido",
										"value": {
											"success": false,
											"message": "Usuário não autenticado!"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "Erro interno no servidor",
						"content": {
							"application/json": {
								"examples": {
									"Erro no Servidor": {
										"summary": "Ocorreu um erro inesperado no servidor",
										"value": {
											"success": false,
											"message": "Erro no servidor: descrição do erro."
										}
									}
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuth": []
					}
				]
			}
		},
		"/users": {
			"post": {
				"tags": ["Users"],
				"summary": "Criação de um novo usuário",
				"description": "Este endpoint permite cadastrar um novo usuário no sistema.",
				"requestBody": {
					"required": true,
					"description": "Dados do usuário a serem cadastrados.",
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/InfoCreateUser"
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "Usuário criado com sucesso.",
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/APIResponseUserCreate"
										},
										{
											"type": "object",
											"properties": {
												"data": {
													"$ref": "#/components/schemas/CreateUser"
												}
											}
										}
									]
								}
							}
						}
					},
					"400": {
						"description": "Solicitação Ruim",
						"content": {
							"application/json": {
								"examples": {
									"Nome é Obrigatório": {
										"summary": "O campo nome não foi fornecido.",
										"value": {
											"success": false,
											"message": "O atributo nome é obrigatório !"
										}
									},
									"E-mail é Obrigatório": {
										"summary": "O campo e-mail não foi fornecido.",
										"value": {
											"success": false,
											"message": "O atributo email é obrigatório !"
										}
									},
									"Username é Obrigatório": {
										"summary": "O campo username não foi fornecido.",
										"value": {
											"success": false,
											"message": "O atributo username é obrigatório !"
										}
									},
									"Senha é Obrigatório": {
										"summary": "O campo senha não foi fornecido.",
										"value": {
											"success": false,
											"message": "O atributo username é obrigatório !"
										}
									},
									"Nome Formato Inválido": {
										"summary": "O campo nome deve ser uma string válida.",
										"value": {
											"success": false,
											"message": "O atributo nome deve vir em formato de texto !"
										}
									},
									"Email Formato Inválido": {
										"summary": "O campo e-mail deve ser uma string válida.",
										"value": {
											"success": false,
											"message": "O atributo email deve vir em formato de texto !"
										}
									},
									"Username Formato Inválido": {
										"summary": "O campo username deve ser uma string válida.",
										"value": {
											"success": false,
											"message": "O atributo username deve vir em formato de texto !"
										}
									},
									"Password Formato Inválido": {
										"summary": "O campo password deve ser uma string válida.",
										"value": {
											"success": false,
											"message": "O atributo senha deve vir em formato de texto !"
										}
									},
									"Nome Formato Data Inválido": {
										"summary": "O campo nome deve ter no minimo 3 caracteres.",
										"value": {
											"success": false,
											"message": "O atributo nome deve ter pelo menos 3 caracteres !"
										}
									},
									"E-mail Formato Data Inválido": {
										"summary": "O campo e-mail deve ter (@) e (.com)",
										"value": {
											"success": false,
											"message": "O e-mail deve conter (@) e (.com)"
										}
									},
									"Username Formato Data Inválido": {
										"summary": "O campo username deve ter no minimo 5 caracteres",
										"value": {
											"success": false,
											"message": "O atributo username deve ter pelo menos 5 caracteres !"
										}
									},
									"Password Formato Data Inválido": {
										"summary": "O campo password deve ter no minimo 5 caracteres",
										"value": {
											"success": false,
											"message": "O atributo senha deve ter pelo menos 5 caracteres !"
										}
									}
								}
							}
						}
					},
					"409": {
						"description": "Conflito",
						"content": {
							"application/json": {
								"examples": {
									"Credenciais Inválidas": {
										"summary": "O e-mail já está em uso !",
										"value": {
											"success": false,
											"message": "O e-mail já está em uso !"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "Erro interno no servidor",
						"content": {
							"application/json": {
								"examples": {
									"Erro no Servidor": {
										"summary": "Ocorreu um erro inesperado no servidor",
										"value": {
											"success": false,
											"message": "Erro no servidor: descrição do erro."
										}
									}
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuth": []
					}
				]
			},
			"get": {
				"tags": ["Users"],
				"summary": "Busca usuários com a opção de filtrar pelo e-mail",
				"description": "Este endpoint permite buscar usuários cadastrados. O e-mail pode ser passado como parâmetro de consulta.",
				"parameters": [
					{
						"name": "email",
						"in": "query",
						"description": "Endereço de e-mail do usuário a ser buscado.",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Usuários encontrados com sucesso.",
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/APIResponseUserFindAll"
										},
										{
											"type": "object",
											"properties": {
												"data": {
													"type": "array",
													"items": {
														"$ref": "#/components/schemas/CreateUser"
													}
												}
											}
										}
									]
								}
							}
						}
					},
					"400": {
						"description": "Erro de validação de entrada",
						"content": {
							"application/json": {
								"examples": {
									"Email Formato Inválido": {
										"summary": "O campo e-mail deve ser uma string válida.",
										"value": {
											"success": false,
											"message": "O atributo email deve vir em formato de texto !"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "Erro interno no servidor",
						"content": {
							"application/json": {
								"examples": {
									"Erro no Servidor": {
										"summary": "Ocorreu um erro inesperado no servidor",
										"value": {
											"success": false,
											"message": "Erro no servidor: descrição do erro."
										}
									}
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuth": []
					}
				]
			}
		},
		"/users/{id}": {
			"get": {
				"tags": ["Users"],
				"summary": "Busca usuário pelo ID",
				"description": "Este endpoint permite buscar um usuário cadastrado através do seu ID único.",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"description": "O ID do usuário a ser buscado. Deve estar no formato UUID.",
						"schema": {
							"type": "string",
							"format": "uuid"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Usuário encontrado com sucesso.",
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/APIResponseUserFindOneById"
										},
										{
											"type": "object",
											"properties": {
												"data": {
													"$ref": "#/components/schemas/CreateUser"
												}
											}
										}
									]
								}
							}
						}
					},
					"400": {
						"description": "Erro de validação de entrada",
						"content": {
							"application/json": {
								"examples": {
									"UUID Formato Inválido": {
										"summary": "O parâmetro fornecido deve ser um UUID.",
										"value": {
											"success": false,
											"message": "Identificador precisa ser um UUID !"
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "Erro de autenticação",
						"content": {
							"application/json": {
								"examples": {
									"Token Não Fornecido": {
										"summary": "Nenhum token foi enviado no cabeçalho",
										"value": {
											"success": false,
											"message": "Token não fornecido!"
										}
									},
									"Formato Inválido": {
										"summary": "Token enviado no formato incorreto",
										"value": {
											"success": false,
											"message": "Formato do token inválido! Use (Bearer <token>)."
										}
									},
									"Token Inválido": {
										"summary": "O token está ausente ou inválido",
										"value": {
											"success": false,
											"message": "Token inválido!"
										}
									},
									"Token Revogado": {
										"summary": "O token foi revogado e não pode ser usado",
										"value": {
											"success": false,
											"message": "Token inválido! Faça login novamente."
										}
									},
									"Usuário Não Autenticado": {
										"summary": "O token não corresponde a um usuário válido",
										"value": {
											"success": false,
											"message": "Usuário não autenticado!"
										}
									}
								}
							}
						}
					},
					"403": {
						"description": "Acesso negado",
						"content": {
							"application/json": {
								"examples": {
									"Acesso negado": {
										"summary": "O usuário não tem permissão.",
										"value": {
											"success": false,
											"message": "Acesso negado: você não tem permissão para acessar este usuario."
										}
									}
								}
							}
						}
					},
					"404": {
						"description": "Usuário não encontrado",
						"content": {
							"application/json": {
								"examples": {
									"Acesso negado": {
										"summary": "O usuário não foi encontrado.",
										"value": {
											"success": false,
											"message": "Usuário a ser buscado não encontrado!"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "Erro interno no servidor",
						"content": {
							"application/json": {
								"examples": {
									"Erro no Servidor": {
										"summary": "Ocorreu um erro inesperado no servidor",
										"value": {
											"success": false,
											"message": "Erro no servidor: descrição do erro."
										}
									}
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuth": []
					}
				]
			},
			"put": {
				"tags": ["Users"],
				"summary": "Atualiza um usuário",
				"description": "Este endpoint permite atualizar um usuário existente pelo seu ID.",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"description": "O ID do usuário a ser atualizado. Deve estar no formato UUID.",
						"schema": {
							"type": "string",
							"format": "uuid"
						}
					}
				],
				"requestBody": {
					"required": false,
					"description": "Dados do usuário a serem atualizados.",
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/InfoUpdateUser"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Usuário atualizado com sucesso.",
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/APIResponseUserUpdate"
										},
										{
											"type": "object",
											"properties": {
												"data": {
													"$ref": "#/components/schemas/UpdateUser"
												}
											}
										}
									]
								}
							}
						}
					},
					"400": {
						"description": "Erro de validação de entrada",
						"content": {
							"application/json": {
								"examples": {
									"Nome Formato Inválido": {
										"summary": "O campo nome deve ser uma string válida.",
										"value": {
											"success": false,
											"message": "O atributo nome deve vir em formato de texto !"
										}
									},
									"Username Formato Inválido": {
										"summary": "O campo username deve ser uma string válida.",
										"value": {
											"success": false,
											"message": "O atributo username deve vir em formato de texto !"
										}
									},
									"Password Formato Inválido": {
										"summary": "O campo password deve ser uma string válida.",
										"value": {
											"success": false,
											"message": "O atributo senha deve vir em formato de texto !"
										}
									},
									"Nome Formato Data Inválido": {
										"summary": "O campo nome deve ter no minimo 3 caracteres.",
										"value": {
											"success": false,
											"message": "O atributo nome deve ter pelo menos 3 caracteres !"
										}
									},
									"Username Formato Data Inválido": {
										"summary": "O campo username deve ter no minimo 5 caracteres",
										"value": {
											"success": false,
											"message": "O atributo username deve ter pelo menos 5 caracteres !"
										}
									},
									"Password Formato Data Inválido": {
										"summary": "O campo password deve ter no minimo 5 caracteres",
										"value": {
											"success": false,
											"message": "O atributo senha deve ter pelo menos 5 caracteres !"
										}
									},
									"UUID Formato Inválido": {
										"summary": "O parâmetro fornecido deve ser um UUID.",
										"value": {
											"success": false,
											"message": "Identificador precisa ser um UUID !"
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "Erro de autenticação",
						"content": {
							"application/json": {
								"examples": {
									"Token Não Fornecido": {
										"summary": "Nenhum token foi enviado no cabeçalho",
										"value": {
											"success": false,
											"message": "Token não fornecido!"
										}
									},
									"Formato Inválido": {
										"summary": "Token enviado no formato incorreto",
										"value": {
											"success": false,
											"message": "Formato do token inválido! Use (Bearer <token>)."
										}
									},
									"Token Inválido": {
										"summary": "O token está ausente ou inválido",
										"value": {
											"success": false,
											"message": "Token inválido!"
										}
									},
									"Token Revogado": {
										"summary": "O token foi revogado e não pode ser usado",
										"value": {
											"success": false,
											"message": "Token inválido! Faça login novamente."
										}
									},
									"Usuário Não Autenticado": {
										"summary": "O token não corresponde a um usuário válido",
										"value": {
											"success": false,
											"message": "Usuário não autenticado!"
										}
									}
								}
							}
						}
					},
					"403": {
						"description": "Acesso negado",
						"content": {
							"application/json": {
								"examples": {
									"Acesso negado": {
										"summary": "O usuário não tem permissão.",
										"value": {
											"success": false,
											"message": "Acesso negado: você não tem permissão para acessar este usuario."
										}
									}
								}
							}
						}
					},
					"404": {
						"description": "Usuário a ser atualizado não encontrado.",
						"content": {
							"application/json": {
								"examples": {
									"Usuário Não Encontrado": {
										"summary": "O ID do usuário não existe no banco de dados",
										"value": {
											"success": false,
											"message": "Usuário a ser atualizado não encontrado !"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "Erro interno no servidor",
						"content": {
							"application/json": {
								"examples": {
									"Erro no Servidor": {
										"summary": "Ocorreu um erro inesperado no servidor",
										"value": {
											"success": false,
											"message": "Erro no servidor: descrição do erro."
										}
									}
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuth": []
					}
				]
			},
			"delete": {
				"tags": ["Users"],
				"summary": "Deleta um usuário",
				"description": "Este endpoint permite deletar um usuário pelo seu ID. Retorna os dados do usuário que foi removido.",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"description": "O ID do usuário a ser deletado. Deve estar no formato UUID.",
						"schema": {
							"type": "string",
							"format": "uuid"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Usuário deletado com sucesso.",
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/APIResponseUserRemove"
										},
										{
											"type": "object",
											"properties": {
												"data": {
													"$ref": "#/components/schemas/UpdateUser"
												}
											}
										}
									]
								}
							}
						}
					},
					"400": {
						"description": "Erro na requisição.",
						"content": {
							"application/json": {
								"examples": {
									"ID Inválido": {
										"summary": "O ID fornecido não está no formato correto",
										"value": {
											"success": false,
											"message": "Identificador precisa ser um UUID !"
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "Erro de autenticação",
						"content": {
							"application/json": {
								"examples": {
									"Token Não Fornecido": {
										"summary": "Nenhum token foi enviado no cabeçalho",
										"value": {
											"success": false,
											"message": "Token não fornecido!"
										}
									},
									"Formato Inválido": {
										"summary": "Token enviado no formato incorreto",
										"value": {
											"success": false,
											"message": "Formato do token inválido! Use (Bearer <token>)."
										}
									},
									"Token Inválido": {
										"summary": "O token está ausente ou inválido",
										"value": {
											"success": false,
											"message": "Token inválido!"
										}
									},
									"Token Revogado": {
										"summary": "O token foi revogado e não pode ser usado",
										"value": {
											"success": false,
											"message": "Token inválido! Faça login novamente."
										}
									},
									"Usuário Não Autenticado": {
										"summary": "O token não corresponde a um usuário válido",
										"value": {
											"success": false,
											"message": "Usuário não autenticado!"
										}
									}
								}
							}
						}
					},
					"403": {
						"description": "Acesso negado.",
						"content": {
							"application/json": {
								"examples": {
									"Acesso negado": {
										"summary": "Acesso negado: você não tem permissão para deletar este usuario.",
										"value": {
											"success": false,
											"message": "Acesso negado: você não tem permissão para deletar este usuario."
										}
									}
								}
							}
						}
					},
					"404": {
						"description": "Usuário não encontrado.",
						"content": {
							"application/json": {
								"examples": {
									"Usuário Não Encontrado": {
										"summary": "O ID do usuário não existe no banco de dados",
										"value": {
											"success": false,
											"message": "Usuario a ser deletado não encontrado !"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "Erro interno no servidor",
						"content": {
							"application/json": {
								"examples": {
									"Erro no Servidor": {
										"summary": "Ocorreu um erro inesperado no servidor",
										"value": {
											"success": false,
											"message": "Erro no servidor: descrição do erro."
										}
									}
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuth": []
					}
				]
			}
		},
		"/tweets": {
			"post": {
				"tags": ["Tweets"],
				"summary": "Cria um novo tweet",
				"description": "Este endpoint permite criar um novo tweet no sistema.",
				"requestBody": {
					"required": true,
					"description": "Dados necessários para criar um tweet.",
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/InfoCreateTweet"
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "Tweet criado com sucesso.",
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/APIResponseTweetCreate"
										},
										{
											"type": "object",
											"properties": {
												"data": {
													"$ref": "#/components/schemas/CreateTweet"
												}
											}
										}
									]
								}
							}
						}
					},
					"400": {
						"description": "Erro na requisição devido a dados inválidos.",
						"content": {
							"application/json": {
								"examples": {
									"Conteúdo Obrigatório": {
										"summary": "O campo conteúdo é obrigatório.",
										"value": {
											"success": false,
											"message": "O atributo 'content' é obrigatório!"
										}
									},
									"Conteúdo Formato Errado": {
										"summary": "O campo conteúdo deve ser uma string.",
										"value": {
											"success": false,
											"message": "O atributo 'content' deve vir em formato de texto!"
										}
									},
									"Type Formato Errado": {
										"summary": "O campo 'type' deve ser uma string.",
										"value": {
											"success": false,
											"message": "O atributo 'type' deve vir em formato de texto!"
										}
									},
									"Conteúdo Tamanho Inválido": {
										"summary": "O campo conteúdo deve ter pelo menos 5 caracteres.",
										"value": {
											"success": false,
											"message": "O atributo 'content' deve ter pelo menos 5 caracteres!"
										}
									},
									"Type Inválido": {
										"summary": "O campo 'type' só aceita 'Tweet'.",
										"value": {
											"success": false,
											"message": "O atributo 'type' deve ser 'Tweet'!"
										}
									},
									"UserId Formato Inválido": {
										"summary": "O campo userId deve ser um UUID válido.",
										"value": {
											"success": false,
											"message": "Identificador 'userId' precisa ser um UUID válido!"
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "Erro de autenticação",
						"content": {
							"application/json": {
								"examples": {
									"Token Não Fornecido": {
										"summary": "Nenhum token foi enviado no cabeçalho",
										"value": {
											"success": false,
											"message": "Token não fornecido!"
										}
									},
									"Formato Inválido": {
										"summary": "Token enviado no formato incorreto",
										"value": {
											"success": false,
											"message": "Formato do token inválido! Use (Bearer <token>)."
										}
									},
									"Token Inválido": {
										"summary": "O token está ausente ou inválido",
										"value": {
											"success": false,
											"message": "Token inválido!"
										}
									},
									"Token Revogado": {
										"summary": "O token foi revogado e não pode ser usado",
										"value": {
											"success": false,
											"message": "Token inválido! Faça login novamente."
										}
									},
									"Usuário Não Autenticado": {
										"summary": "O token não corresponde a um usuário válido",
										"value": {
											"success": false,
											"message": "Usuário não autenticado!"
										}
									}
								}
							}
						}
					},
					"403": {
						"description": "Usuário sem permissão para criar um tweet.",
						"content": {
							"application/json": {
								"examples": {
									"Acesso Negado": {
										"summary": "O usuário não tem permissão.",
										"value": {
											"success": false,
											"message": "Acesso negado: você não tem permissão para criar um tweet."
										}
									}
								}
							}
						}
					},
					"404": {
						"description": "Usuário não encontrado.",
						"content": {
							"application/json": {
								"examples": {
									"Usuário Não Encontrado": {
										"summary": "Nenhum usuário corresponde ao ID fornecido.",
										"value": {
											"success": false,
											"message": "Usuário não encontrado!"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "Erro interno no servidor.",
						"content": {
							"application/json": {
								"examples": {
									"Erro no Servidor": {
										"summary": "Ocorreu um erro inesperado no servidor.",
										"value": {
											"success": false,
											"message": "Erro no servidor: descrição do erro."
										}
									}
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuth": []
					}
				]
			},
			"get": {
				"tags": ["Tweets"],
				"summary": "Obtém todos os tweets",
				"description": "Retorna uma lista de tweets, podendo ser filtrada pelo tipo. Se nenhum tipo for especificado, retorna todos os tweets.",
				"parameters": [
					{
						"name": "type",
						"in": "query",
						"description": "Filtra os tweets pelo tipo. Valores aceitos: 'Tweet'.",
						"schema": {
							"type": "string",
							"enum": ["Tweet"]
						}
					}
				],
				"responses": {
					"200": {
						"description": "Lista de tweets recuperada com sucesso.",
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/APIResponseTweetFindAll"
										},
										{
											"type": "object",
											"properties": {
												"data": {
													"type": "array",
													"items": {
														"$ref": "#/components/schemas/CreateTweet"
													}
												}
											}
										}
									]
								}
							}
						}
					},
					"400": {
						"description": "Erro de validação no parâmetro 'type'.",
						"content": {
							"application/json": {
								"examples": {
									"Tipo inválido": {
										"summary": "Tipo informado não é válido.",
										"value": {
											"success": false,
											"message": "Tipo inválido fornecido: 'Reply'. Os tipos válidos são: 'Tweet'."
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "Erro de autenticação",
						"content": {
							"application/json": {
								"examples": {
									"Token Não Fornecido": {
										"summary": "Nenhum token foi enviado no cabeçalho",
										"value": {
											"success": false,
											"message": "Token não fornecido!"
										}
									},
									"Formato Inválido": {
										"summary": "Token enviado no formato incorreto",
										"value": {
											"success": false,
											"message": "Formato do token inválido! Use (Bearer <token>)."
										}
									},
									"Token Inválido": {
										"summary": "O token está ausente ou inválido",
										"value": {
											"success": false,
											"message": "Token inválido!"
										}
									},
									"Token Revogado": {
										"summary": "O token foi revogado e não pode ser usado",
										"value": {
											"success": false,
											"message": "Token inválido! Faça login novamente."
										}
									},
									"Usuário Não Autenticado": {
										"summary": "O token não corresponde a um usuário válido",
										"value": {
											"success": false,
											"message": "Usuário não autenticado!"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "Erro interno no servidor",
						"content": {
							"application/json": {
								"examples": {
									"Erro no Servidor": {
										"summary": "Ocorreu um erro inesperado no servidor",
										"value": {
											"success": false,
											"message": "Erro no servidor: descrição do erro."
										}
									}
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuth": []
					}
				]
			}
		},
		"tweets/{id}": {
			"get": {
				"tags": ["Tweets"],
				"summary": "Busca um tweet pelo ID",
				"description": "Este endpoint retorna os detalhes de um tweet específico com base no ID fornecido na URL.",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"description": "O UUID do tweet a ser recuperado.",
						"schema": {
							"type": "string",
							"format": "uuid"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Tweet recuperado com sucesso.",
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/APIResponseTweetFindAll"
										},
										{
											"type": "object",
											"properties": {
												"data": {
													"$ref": "#/components/schemas/CreateTweet"
												}
											}
										}
									]
								}
							}
						}
					},
					"400": {
						"description": "Erro de validação nos dados enviados.",
						"content": {
							"application/json": {
								"examples": {
									"UUID Formato Inválido": {
										"summary": "O parâmetro fornecido deve ser um UUID.",
										"value": {
											"success": false,
											"message": "Identificador precisa ser um UUID válido!"
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "Erro de autenticação",
						"content": {
							"application/json": {
								"examples": {
									"Token Não Fornecido": {
										"summary": "Nenhum token foi enviado no cabeçalho",
										"value": {
											"success": false,
											"message": "Token não fornecido!"
										}
									},
									"Formato Inválido": {
										"summary": "Token enviado no formato incorreto",
										"value": {
											"success": false,
											"message": "Formato do token inválido! Use (Bearer <token>)."
										}
									},
									"Token Inválido": {
										"summary": "O token está ausente ou inválido",
										"value": {
											"success": false,
											"message": "Token inválido!"
										}
									},
									"Token Revogado": {
										"summary": "O token foi revogado e não pode ser usado",
										"value": {
											"success": false,
											"message": "Token inválido! Faça login novamente."
										}
									},
									"Usuário Não Autenticado": {
										"summary": "O token não corresponde a um usuário válido",
										"value": {
											"success": false,
											"message": "Usuário não autenticado!"
										}
									}
								}
							}
						}
					},
					"403": {
						"description": "Acesso negado",
						"content": {
							"application/json": {
								"examples": {
									"Acesso negado": {
										"summary": "O usuário não tem permissão para acessar este tweet.",
										"value": {
											"success": false,
											"message": "Acesso negado: você não tem permissão para acessar este tweet."
										}
									}
								}
							}
						}
					},
					"404": {
						"description": "Tweet não encontrado",
						"content": {
							"application/json": {
								"examples": {
									"Tweet Não Encontrado": {
										"summary": "Nenhum tweet encontrado com este ID.",
										"value": {
											"success": false,
											"message": "Tweet não encontrado!"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "Erro interno no servidor",
						"content": {
							"application/json": {
								"examples": {
									"Erro no Servidor": {
										"summary": "Ocorreu um erro inesperado no servidor",
										"value": {
											"success": false,
											"message": "Erro no servidor: descrição do erro."
										}
									}
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuth": []
					}
				]
			},
			"put": {
				"tags": ["Tweets"],
				"summary": "Atualiza um tweet existente",
				"description": "Este endpoint permite a atualização de um tweet existente com base no ID fornecido.",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"description": "O UUID do tweet que será atualizado.",
						"schema": {
							"type": "string",
							"format": "uuid"
						}
					}
				],
				"requestBody": {
					"required": true,
					"description": "Dados atualizados do tweet.",
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/InfoUpdateTweet"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Tweet atualizado com sucesso.",
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/APIResponseTweetUpdate"
										},
										{
											"type": "object",
											"properties": {
												"data": {
													"$ref": "#/components/schemas/UpdateTweet"
												}
											}
										}
									]
								}
							}
						}
					},
					"400": {
						"description": "Erro de validação nos dados enviados.",
						"content": {
							"application/json": {
								"examples": {
									"Conteúdo Formato Errado": {
										"summary": "O campo conteúdo deve ser do tipo string.",
										"value": {
											"success": false,
											"message": "O atributo 'content' deve ser uma string!"
										}
									},
									"Conteúdo Tamanho Inválido": {
										"summary": "O campo conteúdo deve ter pelo menos 5 caracteres.",
										"value": {
											"success": false,
											"message": "O atributo 'content' deve ter pelo menos 5 caracteres!"
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "Erro de autenticação",
						"content": {
							"application/json": {
								"examples": {
									"Token Não Fornecido": {
										"summary": "Nenhum token foi enviado no cabeçalho",
										"value": {
											"success": false,
											"message": "Token não fornecido!"
										}
									},
									"Formato Inválido": {
										"summary": "Token enviado no formato incorreto",
										"value": {
											"success": false,
											"message": "Formato do token inválido! Use (Bearer <token>)."
										}
									},
									"Token Inválido": {
										"summary": "O token está ausente ou inválido",
										"value": {
											"success": false,
											"message": "Token inválido!"
										}
									},
									"Token Revogado": {
										"summary": "O token foi revogado e não pode ser usado",
										"value": {
											"success": false,
											"message": "Token inválido! Faça login novamente."
										}
									},
									"Usuário Não Autenticado": {
										"summary": "O token não corresponde a um usuário válido",
										"value": {
											"success": false,
											"message": "Usuário não autenticado!"
										}
									}
								}
							}
						}
					},
					"403": {
						"description": "Acesso negado",
						"content": {
							"application/json": {
								"examples": {
									"Acesso negado": {
										"summary": "O usuário não tem permissão para atualizar este tweet.",
										"value": {
											"success": false,
											"message": "Acesso negado: você não tem permissão para modificar este tweet."
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "Erro interno no servidor",
						"content": {
							"application/json": {
								"examples": {
									"Erro no Servidor": {
										"summary": "Ocorreu um erro inesperado no servidor",
										"value": {
											"success": false,
											"message": "Erro no servidor: descrição do erro."
										}
									}
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuth": []
					}
				]
			},
			"delete": {
				"tags": ["Tweets"],
				"summary": "Remove um tweet pelo ID",
				"description": "Este endpoint permite deletar um tweet específico pelo seu identificador único (UUID). Apenas o autor do tweet pode removê-lo.",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"description": "O UUID do tweet a ser removido.",
						"schema": {
							"type": "string",
							"format": "uuid"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Tweet removido com sucesso.",
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/APIResponseTweetRemove"
										},
										{
											"type": "object",
											"properties": {
												"data": {
													"$ref": "#/components/schemas/UpdateTweet"
												}
											}
										}
									]
								}
							}
						}
					},
					"400": {
						"description": "Erro de validação no parâmetro 'id'.",
						"content": {
							"application/json": {
								"examples": {
									"UUID Formato Inválido": {
										"summary": "O parâmetro fornecido deve ser um UUID válido.",
										"value": {
											"success": false,
											"message": "Identificador precisa ser um UUID válido!"
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "Erro de autenticação",
						"content": {
							"application/json": {
								"examples": {
									"Token Não Fornecido": {
										"summary": "Nenhum token foi enviado no cabeçalho.",
										"value": {
											"success": false,
											"message": "Token não fornecido!"
										}
									},
									"Formato Inválido": {
										"summary": "Token enviado no formato incorreto.",
										"value": {
											"success": false,
											"message": "Formato do token inválido! Use (Bearer <token>)."
										}
									},
									"Token Inválido": {
										"summary": "O token está ausente ou inválido.",
										"value": {
											"success": false,
											"message": "Token inválido!"
										}
									},
									"Token Revogado": {
										"summary": "O token foi revogado e não pode ser usado.",
										"value": {
											"success": false,
											"message": "Token inválido! Faça login novamente."
										}
									},
									"Usuário Não Autenticado": {
										"summary": "O token não corresponde a um usuário válido.",
										"value": {
											"success": false,
											"message": "Usuário não autenticado!"
										}
									}
								}
							}
						}
					},
					"403": {
						"description": "Acesso negado.",
						"content": {
							"application/json": {
								"examples": {
									"Acesso Negado": {
										"summary": "O usuário não tem permissão para deletar este tweet.",
										"value": {
											"success": false,
											"message": "Acesso negado: você não tem permissão para deletar este tweet."
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "Erro interno no servidor.",
						"content": {
							"application/json": {
								"examples": {
									"Erro no Servidor": {
										"summary": "Ocorreu um erro inesperado no servidor.",
										"value": {
											"success": false,
											"message": "Erro no servidor: descrição do erro."
										}
									}
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuth": []
					}
				]
			}
		},
		"/likes": {
			"post": {
				"tags": ["Likes"],
				"summary": "Adiciona um like a um tweet",
				"description": "Este endpoint permite que um usuário curta um tweet.",
				"parameters": [
					{
						"name": "x-tweet-id",
						"in": "header",
						"required": true,
						"description": "O UUID do tweet que será curtido.",
						"schema": {
							"type": "string",
							"format": "uuid"
						}
					}
				],
				"requestBody": {
					"required": false,
					"description": "O usuário pode ser identificado pelo token ou passado no corpo da requisição.",
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"userId": {
										"type": "string",
										"format": "uuid",
										"example": "123e4567-e89b-12d3-a456-426614174000",
										"description": "UUID do usuário que está curtindo o tweet. Se não for enviado, será assumido o usuário autenticado."
									}
								}
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "Like criado com sucesso!",
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/APIResponseLikeCreate"
										},
										{
											"type": "object",
											"properties": {
												"data": {
													"$ref": "#/components/schemas/CreateLike"
												}
											}
										}
									]
								}
							}
						}
					},
					"400": {
						"description": "Erro de validação",
						"content": {
							"application/json": {
								"examples": {
									"TweetId obrigatório": {
										"summary": "O cabeçalho 'x-tweet-id' não foi enviado.",
										"value": {
											"success": false,
											"message": "TweetId é obrigatório"
										}
									},
									"UUID inválido": {
										"summary": "O identificador do usuário ou do tweet não é válido.",
										"value": {
											"success": false,
											"message": "Identificador precisa ser um UUID!"
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "Erro de autenticação",
						"content": {
							"application/json": {
								"examples": {
									"Token Não Fornecido": {
										"summary": "Nenhum token foi enviado no cabeçalho",
										"value": {
											"success": false,
											"message": "Token não fornecido!"
										}
									},
									"Formato Inválido": {
										"summary": "Token enviado no formato incorreto",
										"value": {
											"success": false,
											"message": "Formato do token inválido! Use (Bearer <token>)."
										}
									},
									"Token Inválido": {
										"summary": "O token está ausente ou inválido",
										"value": {
											"success": false,
											"message": "Token inválido!"
										}
									},
									"Token Revogado": {
										"summary": "O token foi revogado e não pode ser usado",
										"value": {
											"success": false,
											"message": "Token inválido! Faça login novamente."
										}
									},
									"Usuário Não Autenticado": {
										"summary": "O token não corresponde a um usuário válido",
										"value": {
											"success": false,
											"message": "Usuário não autenticado!"
										}
									}
								}
							}
						}
					},
					"403": {
						"description": "Acesso negado",
						"content": {
							"application/json": {
								"examples": {
									"Usuário sem permissão": {
										"summary": "Usuário tentou curtir um tweet em nome de outro usuário.",
										"value": {
											"success": false,
											"message": "Acesso negado: você não tem permissão para curtir este tweet em nome de outro usuário."
										}
									}
								}
							}
						}
					},
					"404": {
						"description": "Usuário ou Tweet não encontrado",
						"content": {
							"application/json": {
								"examples": {
									"Usuário não encontrado": {
										"summary": "O usuário informado não existe no sistema.",
										"value": {
											"success": false,
											"message": "Usuário não encontrado!"
										}
									},
									"Tweet não encontrado": {
										"summary": "O tweet informado não existe.",
										"value": {
											"success": false,
											"message": "Tweet não encontrado!"
										}
									}
								}
							}
						}
					},
					"409": {
						"description": "Like já existente",
						"content": {
							"application/json": {
								"examples": {
									"Like duplicado": {
										"summary": "O usuário já curtiu este tweet anteriormente.",
										"value": {
											"success": false,
											"message": "Like já existe. Use a função de descurtir para remover."
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "Erro interno no servidor",
						"content": {
							"application/json": {
								"examples": {
									"Erro no Servidor": {
										"summary": "Ocorreu um erro inesperado no servidor",
										"value": {
											"success": false,
											"message": "Erro no servidor: descrição do erro."
										}
									}
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuth": []
					}
				]
			}
		},
		"/likes/{id}": {
			"delete": {
				"tags": ["Likes"],
				"summary": "Remove um like",
				"description": "Este endpoint permite remover um like de um tweet.",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"description": "O UUID do like que será removido.",
						"schema": {
							"type": "string",
							"format": "uuid"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Like removido com sucesso!",
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/APIResponseLikeRemove"
										},
										{
											"type": "object",
											"properties": {
												"data": {
													"$ref": "#/components/schemas/CreateLike"
												}
											}
										}
									]
								}
							}
						}
					},
					"401": {
						"description": "Erro de autenticação",
						"content": {
							"application/json": {
								"examples": {
									"Token Não Fornecido": {
										"summary": "Nenhum token foi enviado no cabeçalho",
										"value": {
											"success": false,
											"message": "Token não fornecido!"
										}
									},
									"Formato Inválido": {
										"summary": "Token enviado no formato incorreto",
										"value": {
											"success": false,
											"message": "Formato do token inválido! Use (Bearer <token>)."
										}
									},
									"Token Inválido": {
										"summary": "O token está ausente ou inválido",
										"value": {
											"success": false,
											"message": "Token inválido!"
										}
									},
									"Token Revogado": {
										"summary": "O token foi revogado e não pode ser usado",
										"value": {
											"success": false,
											"message": "Token inválido! Faça login novamente."
										}
									},
									"Usuário Não Autenticado": {
										"summary": "O token não corresponde a um usuário válido",
										"value": {
											"success": false,
											"message": "Usuário não autenticado!"
										}
									}
								}
							}
						}
					},
					"404": {
						"description": "Like não encontrado",
						"content": {
							"application/json": {
								"examples": {
									"Like não encontrado": {
										"summary": "O like informado não existe ou não pertence ao usuário autenticado.",
										"value": {
											"success": false,
											"message": "Like a ser deletado não encontrado ou não pertence ao usuário autenticado!"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "Erro interno no servidor",
						"content": {
							"application/json": {
								"examples": {
									"Erro no Servidor": {
										"summary": "Ocorreu um erro inesperado no servidor",
										"value": {
											"success": false,
											"message": "Erro no servidor: descrição do erro."
										}
									}
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuth": []
					}
				]
			}
		},
		"/replies": {
			"post": {
				"tags": ["Replies"],
				"summary": "Cria uma nova reply",
				"description": "Este endpoint permite criar uma nova reply em resposta a um tweet existente.",
				"requestBody": {
					"required": true,
					"description": "Dados necessários para criar uma reply.",
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/InfoCreateReply"
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "Reply criada com sucesso.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/APIResponseReplyCreate"
								}
							}
						}
					},
					"400": {
						"description": "Erro na requisição devido a dados inválidos.",
						"content": {
							"application/json": {
								"examples": {
									"Conteúdo Obrigatório": {
										"summary": "O campo 'content' é obrigatório.",
										"value": {
											"success": false,
											"message": "O atributo 'content' é obrigatório!"
										}
									},
									"Conteúdo Formato Errado": {
										"summary": "O campo 'content' deve ser uma string.",
										"value": {
											"success": false,
											"message": "O atributo 'content' deve vir em formato de texto!"
										}
									},
									"Type Formato Errado": {
										"summary": "O campo 'type' deve ser uma string.",
										"value": {
											"success": false,
											"message": "O atributo 'type' deve vir em formato de texto!"
										}
									},
									"Conteúdo Tamanho Inválido": {
										"summary": "O campo 'content' deve ter pelo menos 5 caracteres.",
										"value": {
											"success": false,
											"message": "O atributo 'content' deve ter pelo menos 5 caracteres!"
										}
									},
									"Type Inválido": {
										"summary": "O campo 'type' só aceita 'Reply'.",
										"value": {
											"success": false,
											"message": "O atributo 'type' deve ser 'Reply'!"
										}
									},
									"UserId Formato Inválido": {
										"summary": "O campo 'userId' deve ser um UUID válido.",
										"value": {
											"success": false,
											"message": "Identificador 'userId' precisa ser um UUID válido!"
										}
									},
									"TweetId Formato Inválido": {
										"summary": "O campo 'tweetId' deve ser um UUID válido.",
										"value": {
											"success": false,
											"message": "Identificador 'tweetId' precisa ser um UUID válido!"
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "Erro de autenticação",
						"content": {
							"application/json": {
								"examples": {
									"Token Não Fornecido": {
										"summary": "Nenhum token foi enviado no cabeçalho",
										"value": {
											"success": false,
											"message": "Token não fornecido!"
										}
									},
									"Formato Inválido": {
										"summary": "Token enviado no formato incorreto",
										"value": {
											"success": false,
											"message": "Formato do token inválido! Use (Bearer <token>)."
										}
									},
									"Token Inválido": {
										"summary": "O token está ausente ou inválido",
										"value": {
											"success": false,
											"message": "Token inválido!"
										}
									},
									"Token Revogado": {
										"summary": "O token foi revogado e não pode ser usado",
										"value": {
											"success": false,
											"message": "Token inválido! Faça login novamente."
										}
									},
									"Usuário Não Autenticado": {
										"summary": "O token não corresponde a um usuário válido",
										"value": {
											"success": false,
											"message": "Usuário não autenticado!"
										}
									}
								}
							}
						}
					},
					"403": {
						"description": "Usuário sem permissão para criar uma reply.",
						"content": {
							"application/json": {
								"examples": {
									"Acesso Negado": {
										"summary": "O usuário não tem permissão.",
										"value": {
											"success": false,
											"message": "Acesso negado: você não tem permissão para criar uma reply."
										}
									}
								}
							}
						}
					},
					"404": {
						"description": "Usuário ou tweet não encontrado.",
						"content": {
							"application/json": {
								"examples": {
									"Usuário Não Encontrado": {
										"summary": "Nenhum usuário corresponde ao ID fornecido.",
										"value": {
											"success": false,
											"message": "Usuário não encontrado!"
										}
									},
									"Tweet Não Encontrado": {
										"summary": "Nenhum tweet encontrado com o ID fornecido.",
										"value": {
											"success": false,
											"message": "Tweet não encontrado!"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "Erro interno no servidor.",
						"content": {
							"application/json": {
								"examples": {
									"Erro no Servidor": {
										"summary": "Ocorreu um erro inesperado no servidor.",
										"value": {
											"success": false,
											"message": "Erro no servidor: descrição do erro."
										}
									}
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuth": []
					}
				]
			},
			"get": {
				"tags": ["Replies"],
				"summary": "Obtém todas as replies",
				"description": "Retorna uma lista de replies, podendo ser filtrada pelo tipo. Se nenhum tipo for especificado, retorna todas as replies.",
				"parameters": [
					{
						"name": "type",
						"in": "query",
						"description": "Filtra as replies pelo tipo. Valores aceitos: 'Reply'.",
						"schema": {
							"type": "string",
							"enum": ["Reply"]
						}
					}
				],
				"responses": {
					"200": {
						"description": "Lista de replies recuperada com sucesso.",
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/APIResponseReplyFindAll"
										},
										{
											"type": "object",
											"properties": {
												"data": {
													"type": "array",
													"items": {
														"$ref": "#/components/schemas/CreateReply"
													}
												}
											}
										}
									]
								}
							}
						}
					},
					"400": {
						"description": "Erro de validação no parâmetro 'type'.",
						"content": {
							"application/json": {
								"examples": {
									"Tipo inválido": {
										"summary": "Tipo informado não é válido.",
										"value": {
											"success": false,
											"message": "Tipo inválido fornecido: 'Tweet'. Os tipos válidos são: 'Reply'."
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "Erro de autenticação",
						"content": {
							"application/json": {
								"examples": {
									"Token Não Fornecido": {
										"summary": "Nenhum token foi enviado no cabeçalho",
										"value": {
											"success": false,
											"message": "Token não fornecido!"
										}
									},
									"Formato Inválido": {
										"summary": "Token enviado no formato incorreto",
										"value": {
											"success": false,
											"message": "Formato do token inválido! Use (Bearer <token>)."
										}
									},
									"Token Inválido": {
										"summary": "O token está ausente ou inválido",
										"value": {
											"success": false,
											"message": "Token inválido!"
										}
									},
									"Token Revogado": {
										"summary": "O token foi revogado e não pode ser usado",
										"value": {
											"success": false,
											"message": "Token inválido! Faça login novamente."
										}
									},
									"Usuário Não Autenticado": {
										"summary": "O token não corresponde a um usuário válido",
										"value": {
											"success": false,
											"message": "Usuário não autenticado!"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "Erro interno no servidor",
						"content": {
							"application/json": {
								"examples": {
									"Erro no Servidor": {
										"summary": "Ocorreu um erro inesperado no servidor",
										"value": {
											"success": false,
											"message": "Erro no servidor: descrição do erro."
										}
									}
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuth": []
					}
				]
			}
		},
		"/replies/{id}": {
			"get": {
				"tags": ["Replies"],
				"summary": "Buscar uma reply pelo ID",
				"description": "Obtém os detalhes de uma reply específica com base no ID fornecido.",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"description": "O UUID da reply a ser recuperada.",
						"schema": {
							"type": "string",
							"format": "uuid"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Reply recuperada com sucesso.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/APIResponseReplyFindOne"
								}
							}
						}
					},
					"400": {
						"description": "Erro de validação nos dados enviados.",
						"content": {
							"application/json": {
								"examples": {
									"UUID Formato Inválido": {
										"summary": "O parâmetro fornecido deve ser um UUID válido.",
										"value": {
											"success": false,
											"message": "Identificador precisa ser um UUID válido!"
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "Erro de autenticação",
						"content": {
							"application/json": {
								"examples": {
									"Token Não Fornecido": {
										"summary": "Nenhum token foi enviado no cabeçalho",
										"value": {
											"success": false,
											"message": "Token não fornecido!"
										}
									},
									"Formato Inválido": {
										"summary": "Token enviado no formato incorreto",
										"value": {
											"success": false,
											"message": "Formato do token inválido! Use (Bearer <token>)."
										}
									},
									"Token Inválido": {
										"summary": "O token está ausente ou inválido",
										"value": {
											"success": false,
											"message": "Token inválido!"
										}
									},
									"Token Revogado": {
										"summary": "O token foi revogado e não pode ser usado",
										"value": {
											"success": false,
											"message": "Token inválido! Faça login novamente."
										}
									},
									"Usuário Não Autenticado": {
										"summary": "O token não corresponde a um usuário válido",
										"value": {
											"success": false,
											"message": "Usuário não autenticado!"
										}
									}
								}
							}
						}
					},
					"404": {
						"description": "Reply não encontrada.",
						"content": {
							"application/json": {
								"examples": {
									"Reply Não Encontrada": {
										"summary": "Nenhuma reply encontrada com este ID.",
										"value": {
											"success": false,
											"message": "Reply não encontrada!"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "Erro interno no servidor.",
						"content": {
							"application/json": {
								"examples": {
									"Erro no Servidor": {
										"summary": "Ocorreu um erro inesperado no servidor.",
										"value": {
											"success": false,
											"message": "Erro no servidor: descrição do erro."
										}
									}
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuth": []
					}
				]
			},
			"put": {
				"tags": ["Replies"],
				"summary": "Atualizar uma reply",
				"description": "Atualiza o conteúdo de uma reply existente.",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"description": "O UUID da reply a ser atualizada.",
						"schema": {
							"type": "string",
							"format": "uuid"
						}
					}
				],
				"requestBody": {
					"required": true,
					"description": "Dados para atualizar a reply.",
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/InfoUpdateReply"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Reply atualizada com sucesso.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/APIResponseReplyUpdate"
								}
							}
						}
					},
					"400": {
						"description": "Erro de validação nos dados enviados.",
						"content": {
							"application/json": {
								"examples": {
									"Conteúdo Formato Errado": {
										"summary": "O campo 'content' deve ser do tipo string.",
										"value": {
											"success": false,
											"message": "O atributo 'content' deve ser uma string!"
										}
									},
									"Conteúdo Tamanho Inválido": {
										"summary": "O campo 'content' deve ter pelo menos 5 caracteres.",
										"value": {
											"success": false,
											"message": "O atributo 'content' deve ter pelo menos 5 caracteres!"
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "Erro de autenticação",
						"content": {
							"application/json": {
								"examples": {
									"Token Não Fornecido": {
										"summary": "Nenhum token foi enviado no cabeçalho",
										"value": {
											"success": false,
											"message": "Token não fornecido!"
										}
									},
									"Formato Inválido": {
										"summary": "Token enviado no formato incorreto",
										"value": {
											"success": false,
											"message": "Formato do token inválido! Use (Bearer <token>)."
										}
									},
									"Token Inválido": {
										"summary": "O token está ausente ou inválido",
										"value": {
											"success": false,
											"message": "Token inválido!"
										}
									},
									"Token Revogado": {
										"summary": "O token foi revogado e não pode ser usado",
										"value": {
											"success": false,
											"message": "Token inválido! Faça login novamente."
										}
									},
									"Usuário Não Autenticado": {
										"summary": "O token não corresponde a um usuário válido",
										"value": {
											"success": false,
											"message": "Usuário não autenticado!"
										}
									}
								}
							}
						}
					},
					"403": {
						"description": "Acesso negado.",
						"content": {
							"application/json": {
								"examples": {
									"Acesso Negado": {
										"summary": "O usuário não tem permissão para modificar esta reply.",
										"value": {
											"success": false,
											"message": "Acesso negado: você não tem permissão para modificar esta reply."
										}
									}
								}
							}
						}
					},
					"404": {
						"description": "Reply não encontrada.",
						"content": {
							"application/json": {
								"examples": {
									"Reply Não Encontrada": {
										"summary": "Nenhuma reply encontrada com este ID.",
										"value": {
											"success": false,
											"message": "Reply não encontrada!"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "Erro interno no servidor.",
						"content": {
							"application/json": {
								"examples": {
									"Erro no Servidor": {
										"summary": "Ocorreu um erro inesperado no servidor.",
										"value": {
											"success": false,
											"message": "Erro no servidor: descrição do erro."
										}
									}
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuth": []
					}
				]
			},
			"delete": {
				"tags": ["Replies"],
				"summary": "Remover uma reply",
				"description": "Remove uma reply existente com base no ID fornecido.",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"description": "O UUID da reply a ser removida.",
						"schema": {
							"type": "string",
							"format": "uuid"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Reply removida com sucesso.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/APIResponseReplyRemove"
								}
							}
						}
					},
					"400": {
						"description": "Erro de validação no parâmetro 'id'.",
						"content": {
							"application/json": {
								"examples": {
									"UUID Formato Inválido": {
										"summary": "O parâmetro fornecido deve ser um UUID válido.",
										"value": {
											"success": false,
											"message": "Identificador precisa ser um UUID válido!"
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "Erro de autenticação",
						"content": {
							"application/json": {
								"examples": {
									"Token Não Fornecido": {
										"summary": "Nenhum token foi enviado no cabeçalho",
										"value": {
											"success": false,
											"message": "Token não fornecido!"
										}
									},
									"Formato Inválido": {
										"summary": "Token enviado no formato incorreto",
										"value": {
											"success": false,
											"message": "Formato do token inválido! Use (Bearer <token>)."
										}
									},
									"Token Inválido": {
										"summary": "O token está ausente ou inválido",
										"value": {
											"success": false,
											"message": "Token inválido!"
										}
									},
									"Token Revogado": {
										"summary": "O token foi revogado e não pode ser usado",
										"value": {
											"success": false,
											"message": "Token inválido! Faça login novamente."
										}
									},
									"Usuário Não Autenticado": {
										"summary": "O token não corresponde a um usuário válido",
										"value": {
											"success": false,
											"message": "Usuário não autenticado!"
										}
									}
								}
							}
						}
					},
					"403": {
						"description": "Acesso negado.",
						"content": {
							"application/json": {
								"examples": {
									"Acesso Negado": {
										"summary": "O usuário não tem permissão para deletar esta reply.",
										"value": {
											"success": false,
											"message": "Acesso negado: você não tem permissão para deletar esta reply."
										}
									}
								}
							}
						}
					},
					"404": {
						"description": "Reply não encontrada.",
						"content": {
							"application/json": {
								"examples": {
									"Reply Não Encontrada": {
										"summary": "Nenhuma reply encontrada com este ID.",
										"value": {
											"success": false,
											"message": "Reply não encontrada!"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "Erro interno no servidor.",
						"content": {
							"application/json": {
								"examples": {
									"Erro no Servidor": {
										"summary": "Ocorreu um erro inesperado no servidor.",
										"value": {
											"success": false,
											"message": "Erro no servidor: descrição do erro."
										}
									}
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuth": []
					}
				]
			}
		},
		"/followers": {
			"post": {
				"tags": ["Followers"],
				"summary": "Seguir um usuário",
				"description": "Este endpoint permite seguir um usuário específico.",
				"requestBody": {
					"required": true,
					"description": "Dados necessários para seguir um usuário.",
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/InfoFollowUser"
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "Usuário seguido com sucesso.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/APIResponseFollowCreate"
								}
							}
						}
					},
					"400": {
						"description": "Erro de validação nos dados enviados.",
						"content": {
							"application/json": {
								"examples": {
									"ID do Usuário Obrigatório": {
										"summary": "O campo 'userId' é obrigatório.",
										"value": {
											"success": false,
											"message": "O atributo 'userId' é obrigatório!"
										}
									},
									"Formato Inválido": {
										"summary": "O campo 'userId' deve ser um UUID válido.",
										"value": {
											"success": false,
											"message": "O atributo 'userId' deve ser um UUID válido!"
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "Erro de autenticação",
						"content": {
							"application/json": {
								"examples": {
									"Token Não Fornecido": {
										"summary": "Nenhum token foi enviado no cabeçalho",
										"value": {
											"success": false,
											"message": "Token não fornecido!"
										}
									},
									"Formato Inválido": {
										"summary": "Token enviado no formato incorreto",
										"value": {
											"success": false,
											"message": "Formato do token inválido! Use (Bearer <token>)."
										}
									},
									"Token Inválido": {
										"summary": "O token está ausente ou inválido",
										"value": {
											"success": false,
											"message": "Token inválido!"
										}
									},
									"Token Revogado": {
										"summary": "O token foi revogado e não pode ser usado",
										"value": {
											"success": false,
											"message": "Token inválido! Faça login novamente."
										}
									},
									"Usuário Não Autenticado": {
										"summary": "O token não corresponde a um usuário válido",
										"value": {
											"success": false,
											"message": "Usuário não autenticado!"
										}
									}
								}
							}
						}
					},
					"403": {
						"description": "Acesso negado.",
						"content": {
							"application/json": {
								"examples": {
									"Seguir a Si Mesmo": {
										"summary": "O usuário não pode seguir a si mesmo.",
										"value": {
											"success": false,
											"message": "Você não pode seguir a si mesmo!"
										}
									}
								}
							}
						}
					},
					"404": {
						"description": "Usuário não encontrado.",
						"content": {
							"application/json": {
								"examples": {
									"Usuário Não Encontrado": {
										"summary": "Nenhum usuário corresponde ao ID fornecido.",
										"value": {
											"success": false,
											"message": "Usuário não encontrado!"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "Erro interno no servidor.",
						"content": {
							"application/json": {
								"examples": {
									"Erro no Servidor": {
										"summary": "Ocorreu um erro inesperado no servidor.",
										"value": {
											"success": false,
											"message": "Erro no servidor: descrição do erro."
										}
									}
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuth": []
					}
				]
			}
		},
		"/followers/{id}": {
			"delete": {
				"tags": ["Followers"],
				"summary": "Deixar de seguir um usuário",
				"description": "Este endpoint permite deixar de seguir um usuário específico.",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"description": "O UUID do usuário a ser removido dos seguidores.",
						"schema": {
							"type": "string",
							"format": "uuid"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Usuário deixado de seguir com sucesso.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/APIResponseFollowRemove"
								}
							}
						}
					},
					"400": {
						"description": "Erro de validação no parâmetro 'id'.",
						"content": {
							"application/json": {
								"examples": {
									"UUID Formato Inválido": {
										"summary": "O parâmetro fornecido deve ser um UUID válido.",
										"value": {
											"success": false,
											"message": "Identificador precisa ser um UUID válido!"
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "Erro de autenticação",
						"content": {
							"application/json": {
								"examples": {
									"Token Não Fornecido": {
										"summary": "Nenhum token foi enviado no cabeçalho",
										"value": {
											"success": false,
											"message": "Token não fornecido!"
										}
									},
									"Formato Inválido": {
										"summary": "Token enviado no formato incorreto",
										"value": {
											"success": false,
											"message": "Formato do token inválido! Use (Bearer <token>)."
										}
									},
									"Token Inválido": {
										"summary": "O token está ausente ou inválido",
										"value": {
											"success": false,
											"message": "Token inválido!"
										}
									},
									"Token Revogado": {
										"summary": "O token foi revogado e não pode ser usado",
										"value": {
											"success": false,
											"message": "Token inválido! Faça login novamente."
										}
									},
									"Usuário Não Autenticado": {
										"summary": "O token não corresponde a um usuário válido",
										"value": {
											"success": false,
											"message": "Usuário não autenticado!"
										}
									}
								}
							}
						}
					},
					"403": {
						"description": "Acesso negado.",
						"content": {
							"application/json": {
								"examples": {
									"Não Segue o Usuário": {
										"summary": "O usuário não está sendo seguido.",
										"value": {
											"success": false,
											"message": "Você não está seguindo este usuário!"
										}
									}
								}
							}
						}
					},
					"404": {
						"description": "Usuário não encontrado.",
						"content": {
							"application/json": {
								"examples": {
									"Usuário Não Encontrado": {
										"summary": "Nenhum usuário encontrado com este ID.",
										"value": {
											"success": false,
											"message": "Usuário não encontrado!"
										}
									}
								}
							}
						}
					},
					"500": {
						"description": "Erro interno no servidor.",
						"content": {
							"application/json": {
								"examples": {
									"Erro no Servidor": {
										"summary": "Ocorreu um erro inesperado no servidor.",
										"value": {
											"success": false,
											"message": "Erro no servidor: descrição do erro."
										}
									}
								}
							}
						}
					}
				},
				"security": [
					{
						"BearerAuth": []
					}
				]
			}
		}
	},
	"components": {
		"schemas": {
			"InfoLogin": {
				"type": "object",
				"properties": {
					"email": {
						"type": "string",
						"example": "joao.silva@email.com"
					},
					"password": {
						"type": "string",
						"example": "senha123"
					}
				},
				"required": ["email", "password"]
			},
			"InfoCreateUser": {
				"type": "object",
				"properties": {
					"name": {
						"type": "string",
						"example": "João Silva"
					},
					"email": {
						"type": "string",
						"format": "email",
						"example": "joao.silva@email.com"
					},
					"username": {
						"type": "string",
						"example": "joaosilva"
					},
					"password": {
						"type": "string",
						"example": "senha123"
					}
				},
				"required": ["name", "email", "username", "password"]
			},
			"InfoUpdateUser": {
				"type": "object",
				"properties": {
					"name": {
						"type": "string",
						"example": "Maria Paula da Silva"
					},
					"username": {
						"type": "string",
						"example": "maria123"
					},
					"password": {
						"type": "string",
						"example": "senha321"
					}
				}
			},
			"InfoCreateTweet": {
				"type": "object",
				"properties": {
					"content": {
						"type": "string",
						"example": "Mensagem 1"
					},
					"type": {
						"type": "string",
						"example": "Tweet"
					}
				},
				"required": ["content", "type"]
			},
			"InfoUpdateTweet": {
				"type": "object",
				"properties": {
					"content": {
						"type": "string",
						"example": "Mensagem atualizada"
					}
				}
			},
			"InfoCreateReply": {
				"type": "object",
				"properties": {
					"content": {
						"type": "string",
						"example": "Mensagem 1 respondida"
					},
					"type": {
						"type": "string",
						"example": "Reply"
					}
				},
				"required": ["content", "type"]
			},
			"InfoUpdateReply": {
				"type": "object",
				"properties": {
					"content": {
						"type": "string",
						"example": "Mensagem 1 respondida e atualizada"
					}
				}
			},
			"InfoFollowUser": {
				"type": "object",
				"required": ["userId"],
				"properties": {
					"userId": {
						"type": "string",
						"format": "uuid",
						"description": "O UUID do usuário que será seguido.",
						"example": "987e6543-e21b-45d3-b678-123456789abc"
					}
				}
			},
			"APIResponseLogin": {
				"type": "object",
				"properties": {
					"success": {
						"type": "boolean",
						"example": true
					},
					"message": {
						"type": "object",
						"example": "Login efetuado com sucesso"
					}
				}
			},
			"APIResponseLogout": {
				"type": "object",
				"properties": {
					"success": {
						"type": "boolean",
						"example": true
					},
					"message": {
						"type": "object",
						"example": "Logout efetuado com sucesso!"
					}
				}
			},
			"DataLogin": {
				"type": "object",
				"properties": {
					"token": {
						"type": "string",
						"example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ..."
					},
					"userId": {
						"type": "string",
						"format": "uuid",
						"example": "653ae26b-7fe6-4312-9a94-cea7aeae4079"
					},
					"tweetId": {
						"type": "string",
						"format": "uuid",
						"example": "550e8400-e29b-41d4-a716-446655440000"
					},
					"followerId": {
						"type": "array",
						"items": {
							"type": "string",
							"format": "uuid"
						},
						"example": [
							"550e8400-e29b-41d4-a716-446655440000",
							"653ae26b-7fe6-4312-9a94-cea7aeae4079"
						]
					}
				},
				"required": ["token", "userId"]
			},
			"APIResponseUserCreate": {
				"type": "object",
				"properties": {
					"success": {
						"type": "boolean",
						"example": true
					},
					"message": {
						"type": "string",
						"example": "Usuário criado com sucesso !"
					}
				}
			},
			"APIResponseUserFindAll": {
				"type": "object",
				"properties": {
					"success": {
						"type": "boolean",
						"example": true
					},
					"message": {
						"type": "string",
						"example": "Usuários buscado com sucesso !"
					}
				}
			},
			"APIResponseUserFindOneById": {
				"type": "object",
				"properties": {
					"success": {
						"type": "boolean",
						"example": true
					},
					"message": {
						"type": "string",
						"example": "Usuário buscado pelo id com sucesso!"
					}
				}
			},
			"APIResponseUserUpdate": {
				"type": "object",
				"properties": {
					"success": {
						"type": "boolean",
						"example": true
					},
					"message": {
						"type": "string",
						"example": "Usuário atualizado com sucesso !"
					}
				}
			},
			"APIResponseUserRemove": {
				"type": "object",
				"properties": {
					"success": {
						"type": "boolean",
						"example": true
					},
					"message": {
						"type": "string",
						"example": "Usuário deletado com sucesso !"
					}
				}
			},
			"APIResponseTweetCreate": {
				"type": "object",
				"properties": {
					"success": {
						"type": "boolean",
						"example": true
					},
					"message": {
						"type": "string",
						"example": "Tweet criado com sucesso !"
					}
				}
			},
			"APIResponseTweetFindAll": {
				"type": "object",
				"properties": {
					"success": {
						"type": "boolean",
						"example": true
					},
					"message": {
						"type": "string",
						"example": "Tweets buscados com sucesso!"
					}
				}
			},
			"APIResponseTweetUpdate": {
				"type": "object",
				"properties": {
					"success": {
						"type": "boolean",
						"example": true
					},
					"message": {
						"type": "string",
						"example": "Tweet atualizado com sucesso!"
					}
				}
			},
			"APIResponseTweetRemove": {
				"type": "object",
				"properties": {
					"success": {
						"type": "boolean",
						"example": true
					},
					"message": {
						"type": "string",
						"example": "Tweet deletado com sucesso!"
					}
				}
			},
			"APIResponseLikeCreate": {
				"type": "object",
				"properties": {
					"success": {
						"type": "boolean",
						"example": true
					},
					"message": {
						"type": "string",
						"example": "Like criado com sucesso !"
					}
				}
			},
			"APIResponseLikeRemove": {
				"type": "object",
				"properties": {
					"success": {
						"type": "boolean",
						"example": true
					},
					"message": {
						"type": "string",
						"example": "Like deletado com sucesso!"
					}
				}
			},
			"APIResponseReplyCreate": {
				"type": "object",
				"properties": {
					"success": {
						"type": "boolean",
						"example": true
					},
					"message": {
						"type": "string",
						"example": "Reply criado com sucesso!"
					},
					"data": {
						"$ref": "#/components/schemas/CreateReply"
					}
				}
			},
			"APIResponseReplyFindAll": {
				"type": "object",
				"properties": {
					"success": {
						"type": "boolean",
						"example": true
					},
					"message": {
						"type": "string",
						"example": "Lista de replies recuperada com sucesso!"
					},
					"data": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/CreateReply"
						}
					}
				}
			},
			"APIResponseReplyFindOne": {
				"type": "object",
				"properties": {
					"success": {
						"type": "boolean",
						"example": true
					},
					"message": {
						"type": "string",
						"example": "Reply recuperada com sucesso!"
					},
					"data": {
						"$ref": "#/components/schemas/CreateReply"
					}
				}
			},
			"APIResponseReplyUpdate": {
				"type": "object",
				"properties": {
					"success": {
						"type": "boolean",
						"example": true
					},
					"message": {
						"type": "string",
						"example": "Reply atualizada com sucesso!"
					},
					"data": {
						"$ref": "#/components/schemas/UpdateReply"
					}
				}
			},
			"APIResponseReplyRemove": {
				"type": "object",
				"properties": {
					"success": {
						"type": "boolean",
						"example": true
					},
					"message": {
						"type": "string",
						"example": "Reply removida com sucesso!"
					},
					"data": {
						"$ref": "#/components/schemas/UpdateReply"
					}
				}
			},
			"APIResponseFollowCreate": {
				"type": "object",
				"properties": {
					"success": {
						"type": "boolean",
						"example": true
					},
					"message": {
						"type": "string",
						"example": "Usuário seguido com sucesso!"
					},
					"data": {
						"$ref": "#/components/schemas/CreateFollower"
					}
				}
			},
			"APIResponseFollowRemove": {
				"type": "object",
				"properties": {
					"success": {
						"type": "boolean",
						"example": true
					},
					"message": {
						"type": "string",
						"example": "Usuário deixado de seguir com sucesso!"
					}
				}
			},
			"CreateUser": {
				"type": "object",
				"properties": {
					"name": {
						"type": "string",
						"example": "João Silva"
					},
					"email": {
						"type": "string",
						"format": "email",
						"example": "joao.silva@email.com"
					},
					"username": {
						"type": "string",
						"example": "joaosilva"
					},
					"createdAt": {
						"type": "string",
						"example": "2024-02-01T12:30:45Z"
					}
				}
			},
			"UpdateUser": {
				"type": "object",
				"properties": {
					"name": {
						"type": "string",
						"example": "Maria Paula da Silva"
					},
					"username": {
						"type": "string",
						"example": "maria123"
					},
					"createdAt": {
						"type": "string",
						"example": "2024-02-01T12:30:45Z"
					}
				}
			},
			"CreateTweet": {
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"format": "uuid",
						"description": "Identificador único do tweet"
					},
					"content": {
						"type": "string",
						"example": "Essa é uma mensagem de exemplo",
						"description": "Conteúdo do tweet"
					},
					"type": {
						"type": "string",
						"example": "Tweet",
						"description": "Tipo da publicação (ex: Tweet, Reply, etc.)"
					},
					"createdAt": {
						"type": "string",
						"format": "date-time",
						"example": "2024-02-02T12:34:56Z",
						"description": "Data e hora de criação do tweet no formato ISO 8601"
					}
				},
				"required": ["id", "content", "type", "createdAt"]
			},
			"UpdateTweet": {
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"format": "uuid",
						"description": "Identificador único do tweet"
					},
					"content": {
						"type": "string",
						"example": "Essa é uma mensagem de exemplo atualizada",
						"description": "Conteúdo do tweet"
					},
					"type": {
						"type": "string",
						"example": "Tweet",
						"description": "Tipo da publicação (ex: Tweet, Reply, etc.)"
					},
					"createdAt": {
						"type": "string",
						"format": "date-time",
						"example": "2024-02-02T12:34:56Z",
						"description": "Data e hora de criação do tweet no formato ISO 8601"
					}
				},
				"required": ["id", "createdAt"]
			},
			"CreateLike": {
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"format": "uuid",
						"example": "123e4567-e89b-12d3-a456-426614174000"
					},
					"userId": {
						"type": "string",
						"format": "uuid",
						"example": "123e4567-e89b-12d3-a456-426614174001"
					},
					"tweetId": {
						"type": "string",
						"format": "uuid",
						"example": "123e4567-e89b-12d3-a456-426614174002"
					},
					"createdAt": {
						"type": "string",
						"format": "date-time",
						"example": "2025-02-02T12:34:56Z"
					},
					"liked": {
						"type": "boolean",
						"example": true
					},
					"likeCount": {
						"type": "integer",
						"example": 1
					}
				}
			},
			"CreateReply": {
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"format": "uuid",
						"description": "Identificador único do tweet"
					},
					"content": {
						"type": "string",
						"example": "Essa é uma mensagem de exemplo",
						"description": "Conteúdo do tweet"
					},
					"type": {
						"type": "string",
						"example": "Reply",
						"description": "Tipo da publicação (ex: Tweet, Reply, etc.)"
					},
					"createdAt": {
						"type": "string",
						"format": "date-time",
						"example": "2024-02-02T12:34:56Z",
						"description": "Data e hora de criação do tweet no formato ISO 8601"
					}
				},
				"required": ["id", "content", "type", "createdAt"]
			},
			"UpdateReply": {
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"format": "uuid",
						"description": "Identificador único do tweet"
					},
					"content": {
						"type": "string",
						"example": "Essa é uma mensagem de exemplo",
						"description": "Conteúdo do tweet"
					},
					"type": {
						"type": "string",
						"example": "Reply",
						"description": "Tipo da publicação (ex: Tweet, Reply, etc.)"
					},
					"createdAt": {
						"type": "string",
						"format": "date-time",
						"example": "2024-02-02T12:34:56Z",
						"description": "Data e hora de criação do tweet no formato ISO 8601"
					}
				},
				"required": ["id", "content", "type", "createdAt"]
			},
			"CreateFollower": {
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"format": "uuid",
						"example": "550e8400-e29b-41d4-a716-446655440000"
					},
					"followerId": {
						"type": "string",
						"format": "uuid",
						"example": "123e4567-e89b-12d3-a456-426614174000"
					},
					"userId": {
						"type": "string",
						"format": "uuid",
						"example": "987e6543-e21b-45d3-b678-123456789abc"
					},
					"createdAt": {
						"type": "string",
						"format": "date-time",
						"example": "2024-02-01T12:34:56.789Z"
					}
				}
			}
		},
		"securitySchemes": {
			"BearerAuth": {
				"type": "http",
				"scheme": "bearer",
				"bearerFormat": "JWT",
				"description": "Insira o token JWT no formato 'Bearer {token}'."
			}
		}
	}
}
